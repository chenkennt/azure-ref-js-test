items:
  - uid: Routes
    id: Routes
    name: Routes
    type: Class
    syntax:
      content: Routes
    fullName: Routes
    children:
      - 'Routes#client'
      - 'Routes#deleteMethod'
      - 'Routes#beginDeleteMethod'
      - 'Routes#get'
      - 'Routes#createOrUpdate'
      - 'Routes#beginCreateOrUpdate'
      - 'Routes#list'
      - 'Routes#listNext'
  - uid: 'Routes#client'
    id: client
    parent: Routes
    name: client
    type: Field
    syntax:
      content: client
    fullName: Routes.client
  - uid: 'Routes#deleteMethod'
    id: deleteMethod
    parent: Routes
    name: >-
      deleteMethod(resourceGroupName, routeTableName, routeName, options,
      options.customHeaders, callback)
    summary: The delete route operation deletes the specified route from a route table.
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: routeName
          type: string
          description: The name of the route.
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {null} [result]   - The deserialized result object.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function deleteMethod(resourceGroupName, routeTableName, routeName,
        options, options.customHeaders, callback);
    fullName: >-
      Routes.deleteMethod(resourceGroupName, routeTableName, routeName, options,
      options.customHeaders, callback)
    children:
      - 'Routes#deleteMethod~client'
      - 'Routes#deleteMethod~callback'
      - 'Routes#deleteMethod~options'
  - uid: 'Routes#beginDeleteMethod'
    id: beginDeleteMethod
    parent: Routes
    name: >-
      beginDeleteMethod(resourceGroupName, routeTableName, routeName, options,
      options.customHeaders, callback)
    summary: The delete route operation deletes the specified route from a route table.
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: routeName
          type: string
          description: The name of the route.
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {null} [result]   - The deserialized result object.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function beginDeleteMethod(resourceGroupName, routeTableName, routeName,
        options, options.customHeaders, callback);
    fullName: >-
      Routes.beginDeleteMethod(resourceGroupName, routeTableName, routeName,
      options, options.customHeaders, callback)
    children:
      - 'Routes#beginDeleteMethod~client'
      - 'Routes#beginDeleteMethod~callback'
      - 'Routes#beginDeleteMethod~options'
      - 'Routes#beginDeleteMethod~requestUrl'
      - 'Routes#beginDeleteMethod~requestUrl'
      - 'Routes#beginDeleteMethod~requestUrl'
      - 'Routes#beginDeleteMethod~requestUrl'
      - 'Routes#beginDeleteMethod~requestUrl'
      - 'Routes#beginDeleteMethod~queryParameters'
      - 'Routes#beginDeleteMethod~requestUrl'
      - 'Routes#beginDeleteMethod~regex'
      - 'Routes#beginDeleteMethod~requestUrl'
      - 'Routes#beginDeleteMethod~httpRequest'
      - 'Routes#beginDeleteMethod~headerName'
  - uid: 'Routes#get'
    id: get
    parent: Routes
    name: >-
      get(resourceGroupName, routeTableName, routeName, options,
      options.customHeaders, callback)
    summary: "The Get route operation retreives information about the specified route\rfrom the route table."
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: routeName
          type: string
          description: The name of the route.
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link Route} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function get(resourceGroupName, routeTableName, routeName, options,
        options.customHeaders, callback);
    fullName: >-
      Routes.get(resourceGroupName, routeTableName, routeName, options,
      options.customHeaders, callback)
    children:
      - 'Routes#get~client'
      - 'Routes#get~callback'
      - 'Routes#get~options'
      - 'Routes#get~requestUrl'
      - 'Routes#get~requestUrl'
      - 'Routes#get~requestUrl'
      - 'Routes#get~requestUrl'
      - 'Routes#get~requestUrl'
      - 'Routes#get~queryParameters'
      - 'Routes#get~requestUrl'
      - 'Routes#get~regex'
      - 'Routes#get~requestUrl'
      - 'Routes#get~httpRequest'
      - 'Routes#get~headerName'
  - uid: 'Routes#createOrUpdate'
    id: createOrUpdate
    parent: Routes
    name: >-
      createOrUpdate(resourceGroupName, routeTableName, routeName,
      routeParameters, routeParameters.addressPrefix,
      routeParameters.nextHopType, routeParameters.nextHopIpAddress,
      routeParameters.provisioningState, routeParameters.name,
      routeParameters.etag, routeParameters.id, options, options.customHeaders,
      callback)
    summary: >-
      The Put route operation creates/updates a route in the specified route
      table
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: routeName
          type: string
          description: The name of the route.
        - id: routeParameters
          type: object
          description: "Parameters supplied to the create/update\rrouteoperation"
        - id: routeParameters.addressPrefix
          type: string
          description: "Gets or sets the\rdestination CIDR to which the route applies."
        - id: routeParameters.nextHopType
          type: string
          description: "Gets or sets the type of\rAzure hop the packet should be sent to. Possible values include:\r'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance',\r'None'"
        - id: routeParameters.nextHopIpAddress
          type: string
          description: "Gets or sets the IP\raddress packets should be forwarded to. Next hop values are only allowed\rin routes where the next hop type is VirtualAppliance."
        - id: routeParameters.provisioningState
          type: string
          description: "Gets or sets\rProvisioning state of the resource Updating/Deleting/Failed"
        - id: routeParameters.name
          type: string
          description: "Gets name of the resource that is\runique within a resource group. This name can be used to access the\rresource"
        - id: routeParameters.etag
          type: string
          description: "A unique read-only string that\rchanges whenever the resource is updated"
        - id: routeParameters.id
          type: string
          description: Resource Id
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link Route} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function createOrUpdate(resourceGroupName, routeTableName, routeName,
        routeParameters, routeParameters.addressPrefix,
        routeParameters.nextHopType, routeParameters.nextHopIpAddress,
        routeParameters.provisioningState, routeParameters.name,
        routeParameters.etag, routeParameters.id, options,
        options.customHeaders, callback);
    fullName: >-
      Routes.createOrUpdate(resourceGroupName, routeTableName, routeName,
      routeParameters, routeParameters.addressPrefix,
      routeParameters.nextHopType, routeParameters.nextHopIpAddress,
      routeParameters.provisioningState, routeParameters.name,
      routeParameters.etag, routeParameters.id, options, options.customHeaders,
      callback)
    children:
      - 'Routes#createOrUpdate~client'
      - 'Routes#createOrUpdate~callback'
      - 'Routes#createOrUpdate~options'
  - uid: 'Routes#beginCreateOrUpdate'
    id: beginCreateOrUpdate
    parent: Routes
    name: >-
      beginCreateOrUpdate(resourceGroupName, routeTableName, routeName,
      routeParameters, routeParameters.addressPrefix,
      routeParameters.nextHopType, routeParameters.nextHopIpAddress,
      routeParameters.provisioningState, routeParameters.name,
      routeParameters.etag, routeParameters.id, options, options.customHeaders,
      callback)
    summary: >-
      The Put route operation creates/updates a route in the specified route
      table
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: routeName
          type: string
          description: The name of the route.
        - id: routeParameters
          type: object
          description: "Parameters supplied to the create/update\rrouteoperation"
        - id: routeParameters.addressPrefix
          type: string
          description: "Gets or sets the\rdestination CIDR to which the route applies."
        - id: routeParameters.nextHopType
          type: string
          description: "Gets or sets the type of\rAzure hop the packet should be sent to. Possible values include:\r'VirtualNetworkGateway', 'VnetLocal', 'Internet', 'VirtualAppliance',\r'None'"
        - id: routeParameters.nextHopIpAddress
          type: string
          description: "Gets or sets the IP\raddress packets should be forwarded to. Next hop values are only allowed\rin routes where the next hop type is VirtualAppliance."
        - id: routeParameters.provisioningState
          type: string
          description: "Gets or sets\rProvisioning state of the resource Updating/Deleting/Failed"
        - id: routeParameters.name
          type: string
          description: "Gets name of the resource that is\runique within a resource group. This name can be used to access the\rresource"
        - id: routeParameters.etag
          type: string
          description: "A unique read-only string that\rchanges whenever the resource is updated"
        - id: routeParameters.id
          type: string
          description: Resource Id
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link Route} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function beginCreateOrUpdate(resourceGroupName, routeTableName,
        routeName, routeParameters, routeParameters.addressPrefix,
        routeParameters.nextHopType, routeParameters.nextHopIpAddress,
        routeParameters.provisioningState, routeParameters.name,
        routeParameters.etag, routeParameters.id, options,
        options.customHeaders, callback);
    fullName: >-
      Routes.beginCreateOrUpdate(resourceGroupName, routeTableName, routeName,
      routeParameters, routeParameters.addressPrefix,
      routeParameters.nextHopType, routeParameters.nextHopIpAddress,
      routeParameters.provisioningState, routeParameters.name,
      routeParameters.etag, routeParameters.id, options, options.customHeaders,
      callback)
    children:
      - 'Routes#beginCreateOrUpdate~client'
      - 'Routes#beginCreateOrUpdate~callback'
      - 'Routes#beginCreateOrUpdate~options'
      - 'Routes#beginCreateOrUpdate~requestUrl'
      - 'Routes#beginCreateOrUpdate~requestUrl'
      - 'Routes#beginCreateOrUpdate~requestUrl'
      - 'Routes#beginCreateOrUpdate~requestUrl'
      - 'Routes#beginCreateOrUpdate~requestUrl'
      - 'Routes#beginCreateOrUpdate~queryParameters'
      - 'Routes#beginCreateOrUpdate~requestUrl'
      - 'Routes#beginCreateOrUpdate~regex'
      - 'Routes#beginCreateOrUpdate~requestUrl'
      - 'Routes#beginCreateOrUpdate~httpRequest'
      - 'Routes#beginCreateOrUpdate~headerName'
      - 'Routes#beginCreateOrUpdate~requestContent'
      - 'Routes#beginCreateOrUpdate~requestModel'
      - 'Routes#beginCreateOrUpdate~requestModelMapper'
      - 'Routes#beginCreateOrUpdate~requestModel'
      - 'Routes#beginCreateOrUpdate~requestContent'
      - 'Routes#beginCreateOrUpdate~serializationError'
  - uid: 'Routes#list'
    id: list
    parent: Routes
    name: >-
      list(resourceGroupName, routeTableName, options, options.customHeaders,
      callback)
    summary: "The List network security rule opertion retrieves all the routes in a route\rtable."
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link RouteListResult} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function list(resourceGroupName, routeTableName, options,
        options.customHeaders, callback);
    fullName: >-
      Routes.list(resourceGroupName, routeTableName, options,
      options.customHeaders, callback)
    children:
      - 'Routes#list~client'
      - 'Routes#list~callback'
      - 'Routes#list~options'
      - 'Routes#list~requestUrl'
      - 'Routes#list~requestUrl'
      - 'Routes#list~requestUrl'
      - 'Routes#list~requestUrl'
      - 'Routes#list~queryParameters'
      - 'Routes#list~requestUrl'
      - 'Routes#list~regex'
      - 'Routes#list~requestUrl'
      - 'Routes#list~httpRequest'
      - 'Routes#list~headerName'
  - uid: 'Routes#listNext'
    id: listNext
    parent: Routes
    name: 'listNext(nextPageLink, options, options.customHeaders, callback)'
    summary: "The List network security rule opertion retrieves all the routes in a route\rtable."
    type: Method
    syntax:
      parameters:
        - id: nextPageLink
          type: string
          description: "The NextLink from the previous successful call\rto List operation."
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link RouteListResult} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function listNext(nextPageLink, options, options.customHeaders,
        callback);
    fullName: 'Routes.listNext(nextPageLink, options, options.customHeaders, callback)'
    children:
      - 'Routes#listNext~client'
      - 'Routes#listNext~callback'
      - 'Routes#listNext~options'
      - 'Routes#listNext~requestUrl'
      - 'Routes#listNext~requestUrl'
      - 'Routes#listNext~regex'
      - 'Routes#listNext~requestUrl'
      - 'Routes#listNext~httpRequest'
      - 'Routes#listNext~headerName'
references:
  - uid: string
    name: string
    fullName: string
    isExternal: false
  - uid: object
    name: object
    fullName: object
    isExternal: false
  - uid: function
    name: function
    fullName: function
    isExternal: false
