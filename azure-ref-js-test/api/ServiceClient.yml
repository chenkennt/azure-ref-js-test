items:
  - uid: ServiceClient
    id: ServiceClient
    name: ServiceClient
    summary: Creates a new ServiceClient object.
    type: Class
    syntax:
      content: ServiceClient
    fullName: ServiceClient
    children:
      - 'ServiceClient#protocol'
      - 'ServiceClient#authenticationProvider'
      - 'ServiceClient#logger'
      - 'ServiceClient#strictSSL'
      - ServiceClient~nodeVersion
      - 'ServiceClient#strictSSL'
      - 'ServiceClient#strictSSL'
      - 'ServiceClient#xml2jsSettings'
      - ServiceClient._getDefaultXml2jsSettings
      - 'ServiceClient#setHost'
      - 'ServiceClient#host'
      - 'ServiceClient#port'
      - 'ServiceClient#port'
      - 'ServiceClient#port'
      - 'ServiceClient#protocol'
      - 'ServiceClient#performChunkedRequest'
      - 'ServiceClient#performRequest'
      - 'ServiceClient#performRequestOutputStream'
      - 'ServiceClient#performRequestInputStream'
      - 'ServiceClient#_performRequest'
      - 'ServiceClient#_buildRequestOptions'
      - 'ServiceClient#_processResponse'
      - 'ServiceClient#withFilter'
      - 'ServiceClient#pipeline'
      - ServiceClient._buildResponse
      - ServiceClient._parseResponse
      - 'ServiceClient#_setRequestUrl'
      - 'ServiceClient#_getPath'
      - 'ServiceClient#_initDefaultFilter'
      - 'ServiceClient#filter'
      - 'ServiceClient#parseMetadataHeaders'
      - ServiceClient.isEmulated
      - ServiceClient._normalizeError
      - 'ServiceClient#setProxy'
      - 'ServiceClient#proxy'
      - 'ServiceClient#proxy'
      - 'ServiceClient#setAgent'
      - 'ServiceClient#agent'
      - 'ServiceClient#_setDefaultProxy'
      - 'ServiceClient#_isHttps'
  - uid: 'ServiceClient#protocol'
    id: protocol
    parent: ServiceClient
    name: protocol
    type: Field
    syntax:
      content: protocol
    fullName: ServiceClient.protocol
  - uid: 'ServiceClient#authenticationProvider'
    id: authenticationProvider
    parent: ServiceClient
    name: authenticationProvider
    type: Field
    syntax:
      content: authenticationProvider
    fullName: ServiceClient.authenticationProvider
  - uid: 'ServiceClient#logger'
    id: logger
    parent: ServiceClient
    name: logger
    type: Field
    syntax:
      content: logger
    fullName: ServiceClient.logger
  - uid: 'ServiceClient#strictSSL'
    id: strictSSL
    parent: ServiceClient
    name: strictSSL
    type: Field
    syntax:
      content: strictSSL
    fullName: ServiceClient.strictSSL
  - uid: ServiceClient~nodeVersion
    id: nodeVersion
    parent: ServiceClient
    name: nodeVersion
    type: Field
    syntax:
      content: nodeVersion
    fullName: ServiceClient.nodeVersion
  - uid: 'ServiceClient#strictSSL'
    id: strictSSL
    parent: ServiceClient
    name: strictSSL
    type: Field
    syntax:
      content: strictSSL
    fullName: ServiceClient.strictSSL
  - uid: 'ServiceClient#strictSSL'
    id: strictSSL
    parent: ServiceClient
    name: strictSSL
    type: Field
    syntax:
      content: strictSSL
    fullName: ServiceClient.strictSSL
  - uid: 'ServiceClient#xml2jsSettings'
    id: xml2jsSettings
    parent: ServiceClient
    name: xml2jsSettings
    type: Field
    syntax:
      content: xml2jsSettings
    fullName: ServiceClient.xml2jsSettings
  - uid: ServiceClient._getDefaultXml2jsSettings
    id: _getDefaultXml2jsSettings
    parent: ServiceClient
    name: _getDefaultXml2jsSettings()
    summary: Gets the default xml2js settings.
    type: Method
    syntax:
      return:
        type: object
        description: The default settings
      content: function _getDefaultXml2jsSettings();
    fullName: ServiceClient._getDefaultXml2jsSettings()
    children:
      - ServiceClient._getDefaultXml2jsSettings~xml2jsSettings
  - uid: 'ServiceClient#setHost'
    id: setHost
    parent: ServiceClient
    name: setHost(host)
    summary: Sets a host for the service.
    type: Method
    syntax:
      parameters:
        - id: host
          type: string
          description: The host for the service.
      content: function setHost(host);
    fullName: ServiceClient.setHost(host)
    children:
      - 'ServiceClient#setHost~parsedHost'
  - uid: 'ServiceClient#host'
    id: host
    parent: ServiceClient
    name: host
    type: Field
    syntax:
      content: host
    fullName: ServiceClient.host
  - uid: 'ServiceClient#port'
    id: port
    parent: ServiceClient
    name: port
    type: Field
    syntax:
      content: port
    fullName: ServiceClient.port
  - uid: 'ServiceClient#port'
    id: port
    parent: ServiceClient
    name: port
    type: Field
    syntax:
      content: port
    fullName: ServiceClient.port
  - uid: 'ServiceClient#port'
    id: port
    parent: ServiceClient
    name: port
    type: Field
    syntax:
      content: port
    fullName: ServiceClient.port
  - uid: 'ServiceClient#protocol'
    id: protocol
    parent: ServiceClient
    name: protocol
    type: Field
    syntax:
      content: protocol
    fullName: ServiceClient.protocol
  - uid: 'ServiceClient#performChunkedRequest'
    id: performChunkedRequest
    parent: ServiceClient
    name: 'performChunkedRequest(webResource, outputData, options, callback)'
    summary: Performs a REST service request through HTTP expecting an input stream.
    type: Method
    syntax:
      parameters:
        - id: webResource
          type: WebResource
          description: The webresource on which to perform the request.
        - id: outputData
          type: string
          description: The outgoing request data as a raw string.
        - id: options
          type: object
          description: The request options.
        - id: options.timeoutIntervalInMs
          type: int
          description: 'The timeout interval, in milliseconds, to use for the request.'
        - id: callback
          type: function
          description: The chunked response callback function.
      content: >-
        function performChunkedRequest(webResource, outputData, options,
        callback);
    fullName: >-
      ServiceClient.performChunkedRequest(webResource, outputData, options,
      callback)
  - uid: 'ServiceClient#performRequest'
    id: performRequest
    parent: ServiceClient
    name: 'performRequest(webResource, outputData, options, callback)'
    summary: Performs a REST service request through HTTP expecting an input stream.
    type: Method
    syntax:
      parameters:
        - id: webResource
          type: WebResource
          description: The webresource on which to perform the request.
        - id: outputData
          type: string
          description: The outgoing request data as a raw string.
        - id: options
          type: object
          description: The request options.
        - id: options.timeoutIntervalInMs
          type: int
          description: 'The timeout interval, in milliseconds, to use for the request.'
        - id: callback
          type: function
          description: The response callback function.
      content: 'function performRequest(webResource, outputData, options, callback);'
    fullName: 'ServiceClient.performRequest(webResource, outputData, options, callback)'
  - uid: 'ServiceClient#performRequestOutputStream'
    id: performRequestOutputStream
    parent: ServiceClient
    name: 'performRequestOutputStream(webResource, outputStream, options, callback)'
    summary: Performs a REST service request through HTTP expecting an input stream.
    type: Method
    syntax:
      parameters:
        - id: webResource
          type: WebResource
          description: The webresource on which to perform the request.
        - id: outputStream
          type: Stream
          description: The outgoing request data as a stream.
        - id: options
          type: object
          description: The request options.
        - id: options.timeoutIntervalInMs
          type: int
          description: 'The timeout interval, in milliseconds, to use for the request.'
        - id: callback
          type: function
          description: The response callback function.
      content: >-
        function performRequestOutputStream(webResource, outputStream, options,
        callback);
    fullName: >-
      ServiceClient.performRequestOutputStream(webResource, outputStream,
      options, callback)
  - uid: 'ServiceClient#performRequestInputStream'
    id: performRequestInputStream
    parent: ServiceClient
    name: >-
      performRequestInputStream(webResource, outputData, inputStream, options,
      callback)
    summary: Performs a REST service request through HTTP expecting an input stream.
    type: Method
    syntax:
      parameters:
        - id: webResource
          type: WebResource
          description: The webresource on which to perform the request.
        - id: outputData
          type: string
          description: The outgoing request data as a raw string.
        - id: inputStream
          type: Stream
          description: The ingoing response data as a stream.
        - id: options
          type: object
          description: The request options.
        - id: options.timeoutIntervalInMs
          type: int
          description: 'The timeout interval, in milliseconds, to use for the request.'
        - id: callback
          type: function
          description: The response callback function.
      content: >-
        function performRequestInputStream(webResource, outputData, inputStream,
        options, callback);
    fullName: >-
      ServiceClient.performRequestInputStream(webResource, outputData,
      inputStream, options, callback)
  - uid: 'ServiceClient#_performRequest'
    id: _performRequest
    parent: ServiceClient
    name: '_performRequest(webResource, body, options, callback, chunkedCallback)'
    summary: Performs a REST service request through HTTP.
    type: Method
    syntax:
      parameters:
        - id: webResource
          type: WebResource
          description: The webresource on which to perform the request.
        - id: body
          type: object
          description: The request body.
        - id: body.outputData
          type: string
          description: The outgoing request data as a raw string.
        - id: body.outputStream
          type: Stream
          description: The outgoing request data as a stream.
        - id: body.inputStream
          type: Stream
          description: The ingoing response data as a stream.
        - id: options
          type: object
          description: The request options.
        - id: options.timeoutIntervalInMs
          type: int
          description: 'The timeout interval, in milliseconds, to use for the request.'
        - id: callback
          type: function
          description: The response callback function.
        - id: chunkedCallback
          type: function
          description: The chunked response callback function.
      content: >-
        function _performRequest(webResource, body, options, callback,
        chunkedCallback);
    fullName: >-
      ServiceClient._performRequest(webResource, body, options, callback,
      chunkedCallback)
    children:
      - 'ServiceClient#_performRequest~self'
  - uid: 'ServiceClient#_buildRequestOptions'
    id: _buildRequestOptions
    parent: ServiceClient
    name: '_buildRequestOptions(webResource, options, callback)'
    summary: Builds the request options to be passed to the http.request method.
    type: Method
    syntax:
      parameters:
        - id: webResource
          type: WebResource
          description: The webresource where to build the options from.
        - id: options
          type: object
          description: The request options.
        - id: callback
          type: function
          description: The callback function.
      return:
        type: undefined
      content: 'function _buildRequestOptions(webResource, options, callback);'
    fullName: 'ServiceClient._buildRequestOptions(webResource, options, callback)'
    children:
      - 'ServiceClient#_buildRequestOptions~self'
  - uid: 'ServiceClient#_processResponse'
    id: _processResponse
    parent: ServiceClient
    name: '_processResponse(webResource, response)'
    summary: Process the response.
    type: Method
    syntax:
      parameters:
        - id: webResource
          type: WebResource
          description: The web resource that made the request.
        - id: response
          type: Response
          description: The response object.
      return:
        description: The normalized responseObject.
      content: 'function _processResponse(webResource, response);'
    fullName: 'ServiceClient._processResponse(webResource, response)'
    children:
      - 'ServiceClient#_processResponse~self'
      - 'ServiceClient#_processResponse~rsp'
      - 'ServiceClient#_processResponse~responseObject'
      - 'ServiceClient#_processResponse~rsp'
      - 'ServiceClient#_processResponse~responseObject'
      - 'ServiceClient#_processResponse~responseObject'
      - 'ServiceClient#_processResponse~rsp'
      - 'ServiceClient#_processResponse~errorBody'
      - 'ServiceClient#_processResponse~code'
      - 'ServiceClient#_processResponse~errorBody'
      - 'ServiceClient#_processResponse~normalizedError'
      - 'ServiceClient#_processResponse~responseObject'
  - uid: 'ServiceClient#withFilter'
    id: withFilter
    parent: ServiceClient
    name: withFilter(filter)
    summary: "Associate a filtering operation with this ServiceClient. Filtering operations\rcan include logging, automatically retrying, etc. Filter operations are objects\rthat implement a method with the signature:\r\r    \"function handle (requestOptions, next)\".\r\rAfter doing its preprocessing on the request options, the method needs to call\r\"next\" passing a callback with the following signature:\rsignature:\r\r    \"function (returnObject, finalCallback, next)\"\r\rIn this callback, and after processing the returnObject (the response from the\rrequest to the server), the callback needs to either invoke next if it exists to\rcontinue processing other filters or simply invoke finalCallback otherwise to end\rup the service invocation."
    type: Method
    syntax:
      parameters:
        - id: filter
          type: Object
          description: The new filter object.
      return:
        type: ServiceClient
        description: A new service client with the filter applied.
      content: function withFilter(filter);
    fullName: ServiceClient.withFilter(filter)
    children:
      - 'ServiceClient#withFilter~derived'
      - 'ServiceClient#withFilter~parentFilter'
      - 'ServiceClient#withFilter~mergedFilter'
      - 'ServiceClient#withFilter~mergedFilter'
  - uid: 'ServiceClient#pipeline'
    id: pipeline
    parent: ServiceClient
    name: pipeline
    type: Field
    syntax:
      content: pipeline
    fullName: ServiceClient.pipeline
  - uid: ServiceClient._buildResponse
    id: _buildResponse
    parent: ServiceClient
    name: _buildResponse()
    type: Method
    syntax:
      content: function _buildResponse();
    fullName: ServiceClient._buildResponse()
  - uid: ServiceClient._parseResponse
    id: _parseResponse
    parent: ServiceClient
    name: _parseResponse(response)
    summary: "Parses a server response body from XML into a JS object.\rThis is done using the xml2js library."
    type: Method
    syntax:
      parameters:
        - id: response
          type: object
          description: >-
            The response object with a property "body" with a XML string
            content.
      return:
        type: object
        description: >-
          The same response object with the body part as a JS object instead of
          a XML string.
      content: function _parseResponse(response);
    fullName: ServiceClient._parseResponse(response)
    children:
      - ServiceClient._parseResponse~parseJSON
      - ServiceClient._parseResponse~parseXml
      - ServiceClient._parseResponse~parseStringError
      - ServiceClient._parseResponse~parseUncategorizedResponse
      - ServiceClient._parseResponse~contentType
  - uid: 'ServiceClient#_setRequestUrl'
    id: _setRequestUrl
    parent: ServiceClient
    name: _setRequestUrl(webResource)
    summary: Sets the webResource's requestUrl based on the service client settings.
    type: Method
    syntax:
      parameters:
        - id: webResource
          type: WebResource
          description: The web resource where to set the request url.
      return:
        type: undefined
      content: function _setRequestUrl(webResource);
    fullName: ServiceClient._setRequestUrl(webResource)
  - uid: 'ServiceClient#_getPath'
    id: _getPath
    parent: ServiceClient
    name: _getPath(path)
    summary: "Retrieves the normalized path to be used in a request.\rIt adds a leading \"/\" to the path in case\rit's not there before."
    type: Method
    syntax:
      parameters:
        - id: path
          type: string
          description: The path to be normalized.
      return:
        type: string
        description: The normalized path.
      content: function _getPath(path);
    fullName: ServiceClient._getPath(path)
    children:
      - 'ServiceClient#_getPath~path'
      - 'ServiceClient#_getPath~path'
  - uid: 'ServiceClient#_initDefaultFilter'
    id: _initDefaultFilter
    parent: ServiceClient
    name: _initDefaultFilter()
    summary: "Initializes the default filter.\rThis filter is responsible for chaining the pre filters request into the operation and, after processing the response,\rpass it to the post processing filters. This method should only be invoked by the ServiceClient constructor."
    type: Method
    syntax:
      return:
        type: undefined
      content: function _initDefaultFilter();
    fullName: ServiceClient._initDefaultFilter()
  - uid: 'ServiceClient#filter'
    id: filter
    parent: ServiceClient
    name: filter()
    type: Method
    syntax:
      content: function filter();
    fullName: ServiceClient.filter()
  - uid: 'ServiceClient#parseMetadataHeaders'
    id: parseMetadataHeaders
    parent: ServiceClient
    name: parseMetadataHeaders(headers)
    summary: Retrieves the metadata headers from the response headers.
    type: Method
    syntax:
      parameters:
        - id: headers
          type: object
          description: The metadata headers.
      return:
        type: object
        description: An object with the metadata headers (without the "x-ms-" prefix).
      content: function parseMetadataHeaders(headers);
    fullName: ServiceClient.parseMetadataHeaders(headers)
    children:
      - 'ServiceClient#parseMetadataHeaders~metadata'
      - 'ServiceClient#parseMetadataHeaders~header'
      - 'ServiceClient#parseMetadataHeaders~key'
  - uid: ServiceClient.isEmulated
    id: isEmulated
    parent: ServiceClient
    name: isEmulated()
    summary: Gets the value of the environment variable for is emulated.
    type: Method
    syntax:
      return:
        type: bool
        description: >-
          True if the service client is running on an emulated environment;
          false otherwise.
      content: function isEmulated();
    fullName: ServiceClient.isEmulated()
  - uid: ServiceClient._normalizeError
    id: _normalizeError
    parent: ServiceClient
    name: _normalizeError(error)
    summary: "Processes the error body into a normalized error object with all the properties lowercased.\r\rError information may be returned by a service call with additional debugging information:\rhttp://msdn.microsoft.com/en-us/library/windowsazure/dd179382.aspx\r\rTable services returns these properties lowercased, example, \"code\" instead of \"Code\". So that the user\rcan always expect the same format, this method lower cases everything."
    type: Method
    syntax:
      parameters:
        - id: error
          type: Object
          description: >-
            The error object as returned by the service and parsed to JSON by
            the xml2json.
      return:
        type: Object
        description: The normalized error object with all properties lower cased.
      content: function _normalizeError(error);
    fullName: ServiceClient._normalizeError(error)
    children:
      - ServiceClient._normalizeError~normalizedError
      - ServiceClient._normalizeError~odataErrorFormat
      - ServiceClient._normalizeError~errorProperties
      - ServiceClient._normalizeError~property
      - ServiceClient._normalizeError~value
      - ServiceClient._normalizeError~value
      - ServiceClient._normalizeError~value
      - ServiceClient._normalizeError~value
      - ServiceClient._normalizeError~property
      - ServiceClient._normalizeError~value
      - ServiceClient._normalizeError~value
      - ServiceClient._normalizeError~value
      - ServiceClient._normalizeError~errorMessage
      - ServiceClient._normalizeError~errorMessage
      - ServiceClient._normalizeError~errorObject
  - uid: 'ServiceClient#setProxy'
    id: setProxy
    parent: ServiceClient
    name: setProxy()
    type: Method
    syntax:
      content: function setProxy();
    fullName: ServiceClient.setProxy()
  - uid: 'ServiceClient#proxy'
    id: proxy
    parent: ServiceClient
    name: proxy
    type: Field
    syntax:
      content: proxy
    fullName: ServiceClient.proxy
  - uid: 'ServiceClient#proxy'
    id: proxy
    parent: ServiceClient
    name: proxy
    type: Field
    syntax:
      content: proxy
    fullName: ServiceClient.proxy
  - uid: 'ServiceClient#setAgent'
    id: setAgent
    parent: ServiceClient
    name: setAgent()
    type: Method
    syntax:
      content: function setAgent();
    fullName: ServiceClient.setAgent()
  - uid: 'ServiceClient#agent'
    id: agent
    parent: ServiceClient
    name: agent
    type: Field
    syntax:
      content: agent
    fullName: ServiceClient.agent
  - uid: 'ServiceClient#_setDefaultProxy'
    id: _setDefaultProxy
    parent: ServiceClient
    name: _setDefaultProxy()
    summary: "Sets the service host default proxy from the environment.\rCan be overridden by calling _setProxyUrl or _setProxy"
    type: Method
    syntax:
      content: function _setDefaultProxy();
    fullName: ServiceClient._setDefaultProxy()
    children:
      - 'ServiceClient#_setDefaultProxy~proxyUrl'
      - 'ServiceClient#_setDefaultProxy~parsedUrl'
  - uid: 'ServiceClient#_isHttps'
    id: _isHttps
    parent: ServiceClient
    name: _isHttps()
    summary: Determines if the current protocol is https.
    type: Method
    syntax:
      return:
        type: Bool
        description: True if the protocol is https; false otherwise.
      content: function _isHttps();
    fullName: ServiceClient._isHttps()
references:
  - uid: object
    name: object
    fullName: object
    isExternal: false
  - uid: string
    name: string
    fullName: string
    isExternal: false
  - uid: WebResource
    name: WebResource
    fullName: WebResource
    isExternal: false
  - uid: int
    name: int
    fullName: int
    isExternal: true
  - uid: function
    name: function
    fullName: function
    isExternal: false
  - uid: Stream
    name: Stream
    fullName: Stream
    isExternal: true
  - uid: undefined
    name: undefined
    fullName: undefined
    isExternal: true
  - uid: Response
    name: Response
    fullName: Response
    isExternal: true
  - uid: Object
    name: Object
    fullName: Object
    isExternal: true
  - uid: ServiceClient
    name: ServiceClient
    fullName: ServiceClient
    isExternal: false
  - uid: bool
    name: bool
    fullName: bool
    isExternal: true
  - uid: Bool
    name: Bool
    fullName: Bool
    isExternal: true
