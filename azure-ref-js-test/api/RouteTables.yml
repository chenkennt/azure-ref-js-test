items:
  - uid: RouteTables
    id: RouteTables
    name: RouteTables
    type: Class
    syntax:
      content: RouteTables
    fullName: RouteTables
    children:
      - 'RouteTables#client'
      - 'RouteTables#deleteMethod'
      - 'RouteTables#beginDeleteMethod'
      - 'RouteTables#get'
      - 'RouteTables#createOrUpdate'
      - 'RouteTables#beginCreateOrUpdate'
      - 'RouteTables#list'
      - 'RouteTables#listAll'
      - 'RouteTables#listNext'
      - 'RouteTables#listAllNext'
  - uid: 'RouteTables#client'
    id: client
    parent: RouteTables
    name: client
    type: Field
    syntax:
      content: client
    fullName: RouteTables.client
  - uid: 'RouteTables#deleteMethod'
    id: deleteMethod
    parent: RouteTables
    name: 'deleteMethod(resourceGroupName, routeTableName, options, callback)'
    summary: The Delete RouteTable operation deletes the specifed Route Table
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {null} [result]   - The deserialized result object.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function deleteMethod(resourceGroupName, routeTableName, options,
        callback);
    fullName: >-
      RouteTables.deleteMethod(resourceGroupName, routeTableName, options,
      callback)
    children:
      - 'RouteTables#deleteMethod~client'
      - 'RouteTables#deleteMethod~callback'
      - 'RouteTables#deleteMethod~options'
  - uid: 'RouteTables#beginDeleteMethod'
    id: beginDeleteMethod
    parent: RouteTables
    name: 'beginDeleteMethod(resourceGroupName, routeTableName, options, callback)'
    summary: The Delete RouteTable operation deletes the specifed Route Table
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {null} [result]   - The deserialized result object.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function beginDeleteMethod(resourceGroupName, routeTableName, options,
        callback);
    fullName: >-
      RouteTables.beginDeleteMethod(resourceGroupName, routeTableName, options,
      callback)
    children:
      - 'RouteTables#beginDeleteMethod~client'
      - 'RouteTables#beginDeleteMethod~callback'
      - 'RouteTables#beginDeleteMethod~options'
      - 'RouteTables#beginDeleteMethod~requestUrl'
      - 'RouteTables#beginDeleteMethod~requestUrl'
      - 'RouteTables#beginDeleteMethod~requestUrl'
      - 'RouteTables#beginDeleteMethod~requestUrl'
      - 'RouteTables#beginDeleteMethod~queryParameters'
      - 'RouteTables#beginDeleteMethod~requestUrl'
      - 'RouteTables#beginDeleteMethod~regex'
      - 'RouteTables#beginDeleteMethod~requestUrl'
      - 'RouteTables#beginDeleteMethod~httpRequest'
      - 'RouteTables#beginDeleteMethod~headerName'
  - uid: 'RouteTables#get'
    id: get
    parent: RouteTables
    name: 'get(resourceGroupName, routeTableName, options, callback)'
    summary: "The Get RouteTables operation retrieves information about the specified\rroute table."
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.expand
          type: string
          description: expand references resources.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link RouteTable} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: 'function get(resourceGroupName, routeTableName, options, callback);'
    fullName: 'RouteTables.get(resourceGroupName, routeTableName, options, callback)'
    children:
      - 'RouteTables#get~client'
      - 'RouteTables#get~callback'
      - 'RouteTables#get~options'
      - 'RouteTables#get~expand'
      - 'RouteTables#get~requestUrl'
      - 'RouteTables#get~requestUrl'
      - 'RouteTables#get~requestUrl'
      - 'RouteTables#get~requestUrl'
      - 'RouteTables#get~queryParameters'
      - 'RouteTables#get~requestUrl'
      - 'RouteTables#get~regex'
      - 'RouteTables#get~requestUrl'
      - 'RouteTables#get~httpRequest'
      - 'RouteTables#get~headerName'
  - uid: 'RouteTables#createOrUpdate'
    id: createOrUpdate
    parent: RouteTables
    name: >-
      createOrUpdate(resourceGroupName, routeTableName, parameters, options,
      callback)
    summary: "The Put RouteTable operation creates/updates a route tablein the specified\rresource group."
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: parameters
          type: object
          description: "Parameters supplied to the create/update Route\rTable operation"
        - id: parameters.routes
          type: array
          description: Gets or sets Routes in a Route Table
        - id: parameters.subnets
          type: array
          description: Gets collection of references to subnets
        - id: parameters.provisioningState
          type: string
          description: "Gets or sets Provisioning\rstate of the resource Updating/Deleting/Failed"
        - id: parameters.etag
          type: string
          description: "Gets a unique read-only string that\rchanges whenever the resource is updated"
        - id: parameters.id
          type: string
          description: Resource Id
        - id: parameters.location
          type: string
          description: Resource location
        - id: parameters.tags
          type: object
          description: Resource tags
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link RouteTable} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function createOrUpdate(resourceGroupName, routeTableName, parameters,
        options, callback);
    fullName: >-
      RouteTables.createOrUpdate(resourceGroupName, routeTableName, parameters,
      options, callback)
    children:
      - 'RouteTables#createOrUpdate~client'
      - 'RouteTables#createOrUpdate~callback'
      - 'RouteTables#createOrUpdate~options'
  - uid: 'RouteTables#beginCreateOrUpdate'
    id: beginCreateOrUpdate
    parent: RouteTables
    name: >-
      beginCreateOrUpdate(resourceGroupName, routeTableName, parameters,
      options, callback)
    summary: "The Put RouteTable operation creates/updates a route tablein the specified\rresource group."
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: routeTableName
          type: string
          description: The name of the route table.
        - id: parameters
          type: object
          description: "Parameters supplied to the create/update Route\rTable operation"
        - id: parameters.routes
          type: array
          description: Gets or sets Routes in a Route Table
        - id: parameters.subnets
          type: array
          description: Gets collection of references to subnets
        - id: parameters.provisioningState
          type: string
          description: "Gets or sets Provisioning\rstate of the resource Updating/Deleting/Failed"
        - id: parameters.etag
          type: string
          description: "Gets a unique read-only string that\rchanges whenever the resource is updated"
        - id: parameters.id
          type: string
          description: Resource Id
        - id: parameters.location
          type: string
          description: Resource location
        - id: parameters.tags
          type: object
          description: Resource tags
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link RouteTable} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: >-
        function beginCreateOrUpdate(resourceGroupName, routeTableName,
        parameters, options, callback);
    fullName: >-
      RouteTables.beginCreateOrUpdate(resourceGroupName, routeTableName,
      parameters, options, callback)
    children:
      - 'RouteTables#beginCreateOrUpdate~client'
      - 'RouteTables#beginCreateOrUpdate~callback'
      - 'RouteTables#beginCreateOrUpdate~options'
      - 'RouteTables#beginCreateOrUpdate~requestUrl'
      - 'RouteTables#beginCreateOrUpdate~requestUrl'
      - 'RouteTables#beginCreateOrUpdate~requestUrl'
      - 'RouteTables#beginCreateOrUpdate~requestUrl'
      - 'RouteTables#beginCreateOrUpdate~queryParameters'
      - 'RouteTables#beginCreateOrUpdate~requestUrl'
      - 'RouteTables#beginCreateOrUpdate~regex'
      - 'RouteTables#beginCreateOrUpdate~requestUrl'
      - 'RouteTables#beginCreateOrUpdate~httpRequest'
      - 'RouteTables#beginCreateOrUpdate~headerName'
      - 'RouteTables#beginCreateOrUpdate~requestContent'
      - 'RouteTables#beginCreateOrUpdate~requestModel'
      - 'RouteTables#beginCreateOrUpdate~requestModelMapper'
      - 'RouteTables#beginCreateOrUpdate~requestModel'
      - 'RouteTables#beginCreateOrUpdate~requestContent'
      - 'RouteTables#beginCreateOrUpdate~serializationError'
  - uid: 'RouteTables#list'
    id: list
    parent: RouteTables
    name: 'list(resourceGroupName, options, callback)'
    summary: The list RouteTables returns all route tables in a resource group
    type: Method
    syntax:
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group.
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link RouteTableListResult} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: 'function list(resourceGroupName, options, callback);'
    fullName: 'RouteTables.list(resourceGroupName, options, callback)'
    children:
      - 'RouteTables#list~client'
      - 'RouteTables#list~callback'
      - 'RouteTables#list~options'
      - 'RouteTables#list~requestUrl'
      - 'RouteTables#list~requestUrl'
      - 'RouteTables#list~requestUrl'
      - 'RouteTables#list~queryParameters'
      - 'RouteTables#list~requestUrl'
      - 'RouteTables#list~regex'
      - 'RouteTables#list~requestUrl'
      - 'RouteTables#list~httpRequest'
      - 'RouteTables#list~headerName'
  - uid: 'RouteTables#listAll'
    id: listAll
    parent: RouteTables
    name: 'listAll(options, callback)'
    summary: The list RouteTables returns all route tables in a subscription
    type: Method
    syntax:
      parameters:
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link RouteTableListResult} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: 'function listAll(options, callback);'
    fullName: 'RouteTables.listAll(options, callback)'
    children:
      - 'RouteTables#listAll~client'
      - 'RouteTables#listAll~callback'
      - 'RouteTables#listAll~options'
      - 'RouteTables#listAll~requestUrl'
      - 'RouteTables#listAll~requestUrl'
      - 'RouteTables#listAll~queryParameters'
      - 'RouteTables#listAll~requestUrl'
      - 'RouteTables#listAll~regex'
      - 'RouteTables#listAll~requestUrl'
      - 'RouteTables#listAll~httpRequest'
      - 'RouteTables#listAll~headerName'
  - uid: 'RouteTables#listNext'
    id: listNext
    parent: RouteTables
    name: 'listNext(nextPageLink, options, callback)'
    summary: The list RouteTables returns all route tables in a resource group
    type: Method
    syntax:
      parameters:
        - id: nextPageLink
          type: string
          description: "The NextLink from the previous successful call\rto List operation."
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link RouteTableListResult} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: 'function listNext(nextPageLink, options, callback);'
    fullName: 'RouteTables.listNext(nextPageLink, options, callback)'
    children:
      - 'RouteTables#listNext~client'
      - 'RouteTables#listNext~callback'
      - 'RouteTables#listNext~options'
      - 'RouteTables#listNext~requestUrl'
      - 'RouteTables#listNext~requestUrl'
      - 'RouteTables#listNext~regex'
      - 'RouteTables#listNext~requestUrl'
      - 'RouteTables#listNext~httpRequest'
      - 'RouteTables#listNext~headerName'
  - uid: 'RouteTables#listAllNext'
    id: listAllNext
    parent: RouteTables
    name: 'listAllNext(nextPageLink, options, callback)'
    summary: The list RouteTables returns all route tables in a subscription
    type: Method
    syntax:
      parameters:
        - id: nextPageLink
          type: string
          description: "The NextLink from the previous successful call\rto List operation."
        - id: options
          type: object
          description: Optional Parameters.
        - id: options.customHeaders
          type: object
          description: "Headers that will be added to the\rrequest"
        - id: callback
          type: function
      return:
        type: function
        description: "callback(err, result, request, response)\r\r                     {Error}  err        - The Error object if an error occurred, null otherwise.\r\r                     {object} [result]   - The deserialized result object.\r                     See {@link RouteTableListResult} for more information.\r\r                     {object} [request]  - The HTTP Request object if an error did not occur.\r\r                     {stream} [response] - The HTTP Response stream if an error did not occur."
      content: 'function listAllNext(nextPageLink, options, callback);'
    fullName: 'RouteTables.listAllNext(nextPageLink, options, callback)'
    children:
      - 'RouteTables#listAllNext~client'
      - 'RouteTables#listAllNext~callback'
      - 'RouteTables#listAllNext~options'
      - 'RouteTables#listAllNext~requestUrl'
      - 'RouteTables#listAllNext~requestUrl'
      - 'RouteTables#listAllNext~regex'
      - 'RouteTables#listAllNext~requestUrl'
      - 'RouteTables#listAllNext~httpRequest'
      - 'RouteTables#listAllNext~headerName'
references:
  - uid: string
    name: string
    fullName: string
    isExternal: false
  - uid: object
    name: object
    fullName: object
    isExternal: false
  - uid: function
    name: function
    fullName: function
    isExternal: false
  - uid: array
    name: array
    fullName: array
    isExternal: true
