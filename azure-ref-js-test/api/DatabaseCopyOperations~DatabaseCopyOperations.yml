items:
  - uid: DatabaseCopyOperations~DatabaseCopyOperations
    id: DatabaseCopyOperations
    parent: DatabaseCopyOperations
    name: DatabaseCopyOperations
    type: Class
    syntax:
      content: DatabaseCopyOperations
    fullName: DatabaseCopyOperations.DatabaseCopyOperations
    children:
      - 'DatabaseCopyOperations~DatabaseCopyOperations#client'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update'
  - uid: 'DatabaseCopyOperations~DatabaseCopyOperations#client'
    id: client
    parent: DatabaseCopyOperations~DatabaseCopyOperations
    name: client
    type: Field
    syntax:
      content: client
    fullName: DatabaseCopyOperations~DatabaseCopyOperations.client
  - uid: 'DatabaseCopyOperations~DatabaseCopyOperations#create'
    id: create
    parent: DatabaseCopyOperations~DatabaseCopyOperations
    name: >-
      create(serverName, databaseName, parameters, parameters.partnerServer,
      parameters.partnerDatabase, parameters.isContinuous,
      parameters.isOfflineSecondary, callback)
    summary: Starts a SQL Server database copy.
    type: Method
    syntax:
      parameters:
        - id: serverName
          type: string
          description: "The name of the SQL Server where the source\rdatabase resides."
        - id: databaseName
          type: string
          description: The name of the source database.
        - id: parameters
          type: DatabaseCopyCreateParameters
          description: "The additional parameters\rfor the create database copy operation."
        - id: parameters.partnerServer
          type: string
          description: "Gets the name of the destination\rserver for the copy."
        - id: parameters.partnerDatabase
          type: string
          description: "Gets the name of the\rdestination database for the copy."
        - id: parameters.isContinuous
          type: boolean
          description: "Gets a value that indicates\rwhether the copy should be continuous."
        - id: parameters.isOfflineSecondary
          type: boolean
          description: "Gets a value that\rindicates whether it is an offline secondary copy."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: >-
        function create(serverName, databaseName, parameters,
        parameters.partnerServer, parameters.partnerDatabase,
        parameters.isContinuous, parameters.isOfflineSecondary, callback);
    fullName: >-
      DatabaseCopyOperations~DatabaseCopyOperations.create(serverName,
      databaseName, parameters, parameters.partnerServer,
      parameters.partnerDatabase, parameters.isContinuous,
      parameters.isOfflineSecondary, callback)
    children:
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~baseUrl'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~baseUrl'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~httpRequest'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~requestContent'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~requestDoc'
      - >-
        DatabaseCopyOperations~DatabaseCopyOperations#create~serviceResourceElement
      - >-
        DatabaseCopyOperations~DatabaseCopyOperations#create~partnerServerElement
      - >-
        DatabaseCopyOperations~DatabaseCopyOperations#create~partnerDatabaseElement
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~isContinuousElement'
      - >-
        DatabaseCopyOperations~DatabaseCopyOperations#create~isOfflineSecondaryElement
      - 'DatabaseCopyOperations~DatabaseCopyOperations#create~requestContent'
  - uid: 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod'
    id: deleteMethod
    parent: DatabaseCopyOperations~DatabaseCopyOperations
    name: 'deleteMethod(serverName, databaseName, databaseCopyName, callback)'
    summary: Stops a SQL Server database copy.
    type: Method
    syntax:
      parameters:
        - id: serverName
          type: string
          description: "The name of the source or destination SQL\rServer instance."
        - id: databaseName
          type: string
          description: The name of the database.
        - id: databaseCopyName
          type: Guid
          description: "The unique identifier for the database copy\rto stop."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: >-
        function deleteMethod(serverName, databaseName, databaseCopyName,
        callback);
    fullName: >-
      DatabaseCopyOperations~DatabaseCopyOperations.deleteMethod(serverName,
      databaseName, databaseCopyName, callback)
    children:
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~baseUrl'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~baseUrl'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#deleteMethod~httpRequest'
  - uid: 'DatabaseCopyOperations~DatabaseCopyOperations#get'
    id: get
    parent: DatabaseCopyOperations~DatabaseCopyOperations
    name: 'get(serverName, databaseName, databaseCopyName, callback)'
    summary: Retrieves information about a SQL Server database copy.
    type: Method
    syntax:
      parameters:
        - id: serverName
          type: string
          description: "The name of the source or destination SQL\rServer instance."
        - id: databaseName
          type: string
          description: The name of the database.
        - id: databaseCopyName
          type: string
          description: "The unique identifier for the database\rcopy to retrieve."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function get(serverName, databaseName, databaseCopyName, callback);'
    fullName: >-
      DatabaseCopyOperations~DatabaseCopyOperations.get(serverName,
      databaseName, databaseCopyName, callback)
    children:
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~baseUrl'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~baseUrl'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#get~httpRequest'
  - uid: 'DatabaseCopyOperations~DatabaseCopyOperations#list'
    id: list
    parent: DatabaseCopyOperations~DatabaseCopyOperations
    name: 'list(serverName, databaseName, callback)'
    summary: Retrieves the list of SQL Server database copies for a database.
    type: Method
    syntax:
      parameters:
        - id: serverName
          type: string
          description: The name of the database server to be queried.
        - id: databaseName
          type: string
          description: The name of the database to be queried.
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function list(serverName, databaseName, callback);'
    fullName: >-
      DatabaseCopyOperations~DatabaseCopyOperations.list(serverName,
      databaseName, callback)
    children:
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~baseUrl'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~baseUrl'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#list~httpRequest'
  - uid: 'DatabaseCopyOperations~DatabaseCopyOperations#update'
    id: update
    parent: DatabaseCopyOperations~DatabaseCopyOperations
    name: >-
      update(serverName, databaseName, databaseCopyName, parameters,
      parameters.isForcedTerminate, callback)
    summary: Updates a SQL Server database copy.
    type: Method
    syntax:
      parameters:
        - id: serverName
          type: string
          description: "The name of the source or destination SQL\rServer instance."
        - id: databaseName
          type: string
          description: The name of the database.
        - id: databaseCopyName
          type: Guid
          description: "The unique identifier for the database copy\rto update."
        - id: parameters
          type: DatabaseCopyUpdateParameters
          description: "The additional parameters\rfor the update database copy operation."
        - id: parameters.isForcedTerminate
          type: boolean
          description: "Gets or sets whether a\rDelete Database Operation will result in forced or friendly termination."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: >-
        function update(serverName, databaseName, databaseCopyName, parameters,
        parameters.isForcedTerminate, callback);
    fullName: >-
      DatabaseCopyOperations~DatabaseCopyOperations.update(serverName,
      databaseName, databaseCopyName, parameters, parameters.isForcedTerminate,
      callback)
    children:
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~baseUrl'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~baseUrl'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~url2'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~httpRequest'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~requestContent'
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~requestDoc'
      - >-
        DatabaseCopyOperations~DatabaseCopyOperations#update~serviceResourceElement
      - >-
        DatabaseCopyOperations~DatabaseCopyOperations#update~isForcedTerminateElement
      - 'DatabaseCopyOperations~DatabaseCopyOperations#update~requestContent'
references:
  - uid: string
    name: string
    fullName: string
    isExternal: false
  - uid: DatabaseCopyCreateParameters
    name: DatabaseCopyCreateParameters
    fullName: DatabaseCopyCreateParameters
    isExternal: true
  - uid: boolean
    name: boolean
    fullName: boolean
    isExternal: true
  - uid: function
    name: function
    fullName: function
    isExternal: false
  - uid: Stream
    name: Stream
    fullName: Stream
    isExternal: true
  - uid: Guid
    name: Guid
    fullName: Guid
    isExternal: true
  - uid: DatabaseCopyUpdateParameters
    name: DatabaseCopyUpdateParameters
    fullName: DatabaseCopyUpdateParameters
    isExternal: true
