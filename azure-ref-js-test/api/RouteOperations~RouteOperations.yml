items:
  - uid: RouteOperations~RouteOperations
    id: RouteOperations
    parent: RouteOperations
    name: RouteOperations
    type: Class
    syntax:
      content: RouteOperations
    fullName: RouteOperations.RouteOperations
    children:
      - 'RouteOperations~RouteOperations#client'
      - 'RouteOperations~RouteOperations#addRouteTableToSubnet'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable'
      - 'RouteOperations~RouteOperations#beginDeleteRoute'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet'
      - 'RouteOperations~RouteOperations#beginSetRoute'
      - 'RouteOperations~RouteOperations#createRouteTable'
      - 'RouteOperations~RouteOperations#deleteRoute'
      - 'RouteOperations~RouteOperations#deleteRouteTable'
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface
      - 'RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance'
      - 'RouteOperations~RouteOperations#getRouteTable'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails'
      - 'RouteOperations~RouteOperations#listRouteTables'
      - 'RouteOperations~RouteOperations#removeRouteTableFromSubnet'
      - 'RouteOperations~RouteOperations#setRoute'
  - uid: 'RouteOperations~RouteOperations#client'
    id: client
    parent: RouteOperations~RouteOperations
    name: client
    type: Field
    syntax:
      content: client
    fullName: RouteOperations~RouteOperations.client
  - uid: 'RouteOperations~RouteOperations#addRouteTableToSubnet'
    id: addRouteTableToSubnet
    parent: RouteOperations~RouteOperations
    name: 'addRouteTableToSubnet(vnetName, subnetName, parameters, callback)'
    summary: "Set the specified route table for the provided subnet in the provided\rvirtual network in this subscription."
    type: Method
    syntax:
      parameters:
        - id: vnetName
          type: string
          description: "The name of the virtual network that contains the\rprovided subnet."
        - id: subnetName
          type: string
          description: "The name of the subnet that the route table\rwill be added to."
        - id: parameters
          type: AddRouteTableToSubnetParameters
          description: "The parameters\rnecessary to add a route table to the provided subnet."
        - id: parameters.routeTableName
          type: string
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: >-
        function addRouteTableToSubnet(vnetName, subnetName, parameters,
        callback);
    fullName: >-
      RouteOperations~RouteOperations.addRouteTableToSubnet(vnetName,
      subnetName, parameters, callback)
    children:
      - 'RouteOperations~RouteOperations#addRouteTableToSubnet~client2'
  - uid: 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet'
    id: beginAddRouteTableToSubnet
    parent: RouteOperations~RouteOperations
    name: 'beginAddRouteTableToSubnet(vnetName, subnetName, parameters, callback)'
    summary: "Set the specified route table for the provided subnet in the provided\rvirtual network in this subscription."
    type: Method
    syntax:
      parameters:
        - id: vnetName
          type: string
          description: "The name of the virtual network that contains the\rprovided subnet."
        - id: subnetName
          type: string
          description: "The name of the subnet that the route table\rwill be added to."
        - id: parameters
          type: AddRouteTableToSubnetParameters
          description: "The parameters\rnecessary to add a route table to the provided subnet."
        - id: parameters.routeTableName
          type: string
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: >-
        function beginAddRouteTableToSubnet(vnetName, subnetName, parameters,
        callback);
    fullName: >-
      RouteOperations~RouteOperations.beginAddRouteTableToSubnet(vnetName,
      subnetName, parameters, callback)
    children:
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~baseUrl'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~baseUrl'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~url2'
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~httpRequest'
      - >-
        RouteOperations~RouteOperations#beginAddRouteTableToSubnet~requestContent
      - 'RouteOperations~RouteOperations#beginAddRouteTableToSubnet~requestDoc'
      - >-
        RouteOperations~RouteOperations#beginAddRouteTableToSubnet~routeTableAssociationElement
      - >-
        RouteOperations~RouteOperations#beginAddRouteTableToSubnet~routeTableNameElement
      - >-
        RouteOperations~RouteOperations#beginAddRouteTableToSubnet~requestContent
  - uid: 'RouteOperations~RouteOperations#beginCreateRouteTable'
    id: beginCreateRouteTable
    parent: RouteOperations~RouteOperations
    name: 'beginCreateRouteTable(parameters, callback)'
    summary: Create the specified route table for this subscription.
    type: Method
    syntax:
      parameters:
        - id: parameters
          type: CreateRouteTableParameters
          description: "The parameters necessary to\rcreate a new route table."
        - id: parameters.name
          type: string
        - id: parameters.label
          type: string
        - id: parameters.location
          type: string
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function beginCreateRouteTable(parameters, callback);'
    fullName: >-
      RouteOperations~RouteOperations.beginCreateRouteTable(parameters,
      callback)
    children:
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~baseUrl'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~baseUrl'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~httpRequest'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~requestContent'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~requestDoc'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~routeTableElement'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~nameElement'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~labelElement'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~locationElement'
      - 'RouteOperations~RouteOperations#beginCreateRouteTable~requestContent'
  - uid: 'RouteOperations~RouteOperations#beginDeleteRoute'
    id: beginDeleteRoute
    parent: RouteOperations~RouteOperations
    name: 'beginDeleteRoute(routeTableName, routeName, callback)'
    summary: Set the specified route for the provided table in this subscription.
    type: Method
    syntax:
      parameters:
        - id: routeTableName
          type: string
          description: "The name of the route table where the\rprovided route will be set."
        - id: routeName
          type: string
          description: "The name of the route that will be set on the\rprovided route table."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function beginDeleteRoute(routeTableName, routeName, callback);'
    fullName: >-
      RouteOperations~RouteOperations.beginDeleteRoute(routeTableName,
      routeName, callback)
    children:
      - 'RouteOperations~RouteOperations#beginDeleteRoute~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~baseUrl'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~baseUrl'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRoute~httpRequest'
  - uid: 'RouteOperations~RouteOperations#beginDeleteRouteTable'
    id: beginDeleteRouteTable
    parent: RouteOperations~RouteOperations
    name: 'beginDeleteRouteTable(routeTableName, callback)'
    summary: Delete the specified route table for this subscription.
    type: Method
    syntax:
      parameters:
        - id: routeTableName
          type: string
          description: The name of the route table to delete.
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function beginDeleteRouteTable(routeTableName, callback);'
    fullName: >-
      RouteOperations~RouteOperations.beginDeleteRouteTable(routeTableName,
      callback)
    children:
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~baseUrl'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~baseUrl'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~url2'
      - 'RouteOperations~RouteOperations#beginDeleteRouteTable~httpRequest'
  - uid: 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet'
    id: beginRemoveRouteTableFromSubnet
    parent: RouteOperations~RouteOperations
    name: 'beginRemoveRouteTableFromSubnet(vnetName, subnetName, callback)'
    summary: "Remove the route table from the provided subnet in the provided virtual\rnetwork in this subscription."
    type: Method
    syntax:
      parameters:
        - id: vnetName
          type: string
          description: "The name of the virtual network that contains the\rprovided subnet."
        - id: subnetName
          type: string
          description: "The name of the subnet that the route table\rwill be removed from."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: >-
        function beginRemoveRouteTableFromSubnet(vnetName, subnetName,
        callback);
    fullName: >-
      RouteOperations~RouteOperations.beginRemoveRouteTableFromSubnet(vnetName,
      subnetName, callback)
    children:
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~baseUrl'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~baseUrl'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - 'RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~url2'
      - >-
        RouteOperations~RouteOperations#beginRemoveRouteTableFromSubnet~httpRequest
  - uid: 'RouteOperations~RouteOperations#beginSetRoute'
    id: beginSetRoute
    parent: RouteOperations~RouteOperations
    name: 'beginSetRoute(routeTableName, routeName, parameters, callback)'
    summary: Set the specified route for the provided table in this subscription.
    type: Method
    syntax:
      parameters:
        - id: routeTableName
          type: string
          description: "The name of the route table where the\rprovided route will be set."
        - id: routeName
          type: string
          description: "The name of the route that will be set on the\rprovided route table."
        - id: parameters
          type: SetRouteParameters
          description: "The parameters necessary to create\ra new route table."
        - id: parameters.name
          type: string
        - id: parameters.addressPrefix
          type: string
        - id: parameters.nextHop
          type: NextHop
        - id: parameters.nextHop.type
          type: string
          description: "Gets or sets the type of the\rnext hop."
        - id: parameters.nextHop.ipAddress
          type: string
          description: "Gets or sets the next hop\rIP addresses."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function beginSetRoute(routeTableName, routeName, parameters, callback);'
    fullName: >-
      RouteOperations~RouteOperations.beginSetRoute(routeTableName, routeName,
      parameters, callback)
    children:
      - 'RouteOperations~RouteOperations#beginSetRoute~url2'
      - 'RouteOperations~RouteOperations#beginSetRoute~url2'
      - 'RouteOperations~RouteOperations#beginSetRoute~url2'
      - 'RouteOperations~RouteOperations#beginSetRoute~url2'
      - 'RouteOperations~RouteOperations#beginSetRoute~url2'
      - 'RouteOperations~RouteOperations#beginSetRoute~url2'
      - 'RouteOperations~RouteOperations#beginSetRoute~url2'
      - 'RouteOperations~RouteOperations#beginSetRoute~baseUrl'
      - 'RouteOperations~RouteOperations#beginSetRoute~baseUrl'
      - 'RouteOperations~RouteOperations#beginSetRoute~url2'
      - 'RouteOperations~RouteOperations#beginSetRoute~url2'
      - 'RouteOperations~RouteOperations#beginSetRoute~url2'
      - 'RouteOperations~RouteOperations#beginSetRoute~httpRequest'
      - 'RouteOperations~RouteOperations#beginSetRoute~requestContent'
      - 'RouteOperations~RouteOperations#beginSetRoute~requestDoc'
      - 'RouteOperations~RouteOperations#beginSetRoute~routeElement'
      - 'RouteOperations~RouteOperations#beginSetRoute~nameElement'
      - 'RouteOperations~RouteOperations#beginSetRoute~addressPrefixElement'
      - 'RouteOperations~RouteOperations#beginSetRoute~nextHopTypeElement'
      - 'RouteOperations~RouteOperations#beginSetRoute~typeElement'
      - 'RouteOperations~RouteOperations#beginSetRoute~ipAddressElement'
      - 'RouteOperations~RouteOperations#beginSetRoute~requestContent'
  - uid: 'RouteOperations~RouteOperations#createRouteTable'
    id: createRouteTable
    parent: RouteOperations~RouteOperations
    name: 'createRouteTable(parameters, callback)'
    summary: Create the specified route table for this subscription.
    type: Method
    syntax:
      parameters:
        - id: parameters
          type: CreateRouteTableParameters
          description: "The parameters necessary to\rcreate a new route table."
        - id: parameters.name
          type: string
        - id: parameters.label
          type: string
        - id: parameters.location
          type: string
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function createRouteTable(parameters, callback);'
    fullName: 'RouteOperations~RouteOperations.createRouteTable(parameters, callback)'
    children:
      - 'RouteOperations~RouteOperations#createRouteTable~client2'
  - uid: 'RouteOperations~RouteOperations#deleteRoute'
    id: deleteRoute
    parent: RouteOperations~RouteOperations
    name: 'deleteRoute(routeTableName, routeName, callback)'
    summary: Set the specified route for the provided table in this subscription.
    type: Method
    syntax:
      parameters:
        - id: routeTableName
          type: string
          description: "The name of the route table where the\rprovided route will be set."
        - id: routeName
          type: string
          description: "The name of the route that will be set on the\rprovided route table."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function deleteRoute(routeTableName, routeName, callback);'
    fullName: >-
      RouteOperations~RouteOperations.deleteRoute(routeTableName, routeName,
      callback)
    children:
      - 'RouteOperations~RouteOperations#deleteRoute~client2'
  - uid: 'RouteOperations~RouteOperations#deleteRouteTable'
    id: deleteRouteTable
    parent: RouteOperations~RouteOperations
    name: 'deleteRouteTable(routeTableName, callback)'
    summary: Delete the specified route table for this subscription.
    type: Method
    syntax:
      parameters:
        - id: routeTableName
          type: string
          description: The name of the route table to delete.
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function deleteRouteTable(routeTableName, callback);'
    fullName: 'RouteOperations~RouteOperations.deleteRouteTable(routeTableName, callback)'
    children:
      - 'RouteOperations~RouteOperations#deleteRouteTable~client2'
  - uid: 'RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface'
    id: getEffectiveRouteTableForNetworkInterface
    parent: RouteOperations~RouteOperations
    name: >-
      getEffectiveRouteTableForNetworkInterface(serviceName, deploymentName,
      roleinstanceName, networkInterfaceName, callback)
    summary: "Get the effective route table for the provided network interface in this\rsubscription."
    type: Method
    syntax:
      parameters:
        - id: serviceName
          type: string
          description: The name of the cloud service.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: roleinstanceName
          type: string
          description: The name of the role instance.
        - id: networkInterfaceName
          type: string
          description: The name of the network interface.
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: >-
        function getEffectiveRouteTableForNetworkInterface(serviceName,
        deploymentName, roleinstanceName, networkInterfaceName, callback);
    fullName: >-
      RouteOperations~RouteOperations.getEffectiveRouteTableForNetworkInterface(serviceName,
      deploymentName, roleinstanceName, networkInterfaceName, callback)
    children:
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~baseUrl
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~baseUrl
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForNetworkInterface~httpRequest
  - uid: 'RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance'
    id: getEffectiveRouteTableForRoleInstance
    parent: RouteOperations~RouteOperations
    name: >-
      getEffectiveRouteTableForRoleInstance(serviceName, deploymentName,
      roleinstanceName, callback)
    summary: "Get the effective route table for the provided role instance in this\rsubscription."
    type: Method
    syntax:
      parameters:
        - id: serviceName
          type: string
          description: The name of the cloud service.
        - id: deploymentName
          type: string
          description: The name of the deployment.
        - id: roleinstanceName
          type: string
          description: The name of the role instance.
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: >-
        function getEffectiveRouteTableForRoleInstance(serviceName,
        deploymentName, roleinstanceName, callback);
    fullName: >-
      RouteOperations~RouteOperations.getEffectiveRouteTableForRoleInstance(serviceName,
      deploymentName, roleinstanceName, callback)
    children:
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~baseUrl
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~baseUrl
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~url2
      - >-
        RouteOperations~RouteOperations#getEffectiveRouteTableForRoleInstance~httpRequest
  - uid: 'RouteOperations~RouteOperations#getRouteTable'
    id: getRouteTable
    parent: RouteOperations~RouteOperations
    name: 'getRouteTable(routeTableName, callback)'
    summary: Get the specified route table for this subscription.
    type: Method
    syntax:
      parameters:
        - id: routeTableName
          type: string
          description: "The name of the route table in this\rsubscription to retrieve."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function getRouteTable(routeTableName, callback);'
    fullName: 'RouteOperations~RouteOperations.getRouteTable(routeTableName, callback)'
    children:
      - 'RouteOperations~RouteOperations#getRouteTable~url2'
      - 'RouteOperations~RouteOperations#getRouteTable~url2'
      - 'RouteOperations~RouteOperations#getRouteTable~url2'
      - 'RouteOperations~RouteOperations#getRouteTable~url2'
      - 'RouteOperations~RouteOperations#getRouteTable~url2'
      - 'RouteOperations~RouteOperations#getRouteTable~baseUrl'
      - 'RouteOperations~RouteOperations#getRouteTable~baseUrl'
      - 'RouteOperations~RouteOperations#getRouteTable~url2'
      - 'RouteOperations~RouteOperations#getRouteTable~url2'
      - 'RouteOperations~RouteOperations#getRouteTable~url2'
      - 'RouteOperations~RouteOperations#getRouteTable~httpRequest'
  - uid: 'RouteOperations~RouteOperations#getRouteTableForSubnet'
    id: getRouteTableForSubnet
    parent: RouteOperations~RouteOperations
    name: 'getRouteTableForSubnet(vnetName, subnetName, callback)'
    summary: "Get the specified route table for the provided subnet in the provided\rvirtual network in this subscription."
    type: Method
    syntax:
      parameters:
        - id: vnetName
          type: string
          description: "The name of the virtual network that contains the\rprovided subnet."
        - id: subnetName
          type: string
          description: The name of the subnet.
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function getRouteTableForSubnet(vnetName, subnetName, callback);'
    fullName: >-
      RouteOperations~RouteOperations.getRouteTableForSubnet(vnetName,
      subnetName, callback)
    children:
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~baseUrl'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~baseUrl'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~url2'
      - 'RouteOperations~RouteOperations#getRouteTableForSubnet~httpRequest'
  - uid: 'RouteOperations~RouteOperations#getRouteTableWithDetails'
    id: getRouteTableWithDetails
    parent: RouteOperations~RouteOperations
    name: 'getRouteTableWithDetails(routeTableName, detailLevel, callback)'
    summary: Get the specified route table for this subscription.
    type: Method
    syntax:
      parameters:
        - id: routeTableName
          type: string
          description: "The name of the route table in this\rsubscription to retrieve."
        - id: detailLevel
          type: string
          description: "The amount of detail about the requested route\rtable that will be returned."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: >-
        function getRouteTableWithDetails(routeTableName, detailLevel,
        callback);
    fullName: >-
      RouteOperations~RouteOperations.getRouteTableWithDetails(routeTableName,
      detailLevel, callback)
    children:
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~url2'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~url2'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~url2'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~url2'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~url2'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~queryParameters'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~url2'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~baseUrl'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~baseUrl'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~url2'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~url2'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~url2'
      - 'RouteOperations~RouteOperations#getRouteTableWithDetails~httpRequest'
  - uid: 'RouteOperations~RouteOperations#listRouteTables'
    id: listRouteTables
    parent: RouteOperations~RouteOperations
    name: listRouteTables(callback)
    summary: List the existing route tables for this subscription.
    type: Method
    syntax:
      parameters:
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: function listRouteTables(callback);
    fullName: RouteOperations~RouteOperations.listRouteTables(callback)
    children:
      - 'RouteOperations~RouteOperations#listRouteTables~url2'
      - 'RouteOperations~RouteOperations#listRouteTables~url2'
      - 'RouteOperations~RouteOperations#listRouteTables~url2'
      - 'RouteOperations~RouteOperations#listRouteTables~url2'
      - 'RouteOperations~RouteOperations#listRouteTables~baseUrl'
      - 'RouteOperations~RouteOperations#listRouteTables~baseUrl'
      - 'RouteOperations~RouteOperations#listRouteTables~url2'
      - 'RouteOperations~RouteOperations#listRouteTables~url2'
      - 'RouteOperations~RouteOperations#listRouteTables~url2'
      - 'RouteOperations~RouteOperations#listRouteTables~httpRequest'
  - uid: 'RouteOperations~RouteOperations#removeRouteTableFromSubnet'
    id: removeRouteTableFromSubnet
    parent: RouteOperations~RouteOperations
    name: 'removeRouteTableFromSubnet(vnetName, subnetName, callback)'
    summary: "Remove the route table from the provided subnet in the provided virtual\rnetwork in this subscription."
    type: Method
    syntax:
      parameters:
        - id: vnetName
          type: string
          description: "The name of the virtual network that contains the\rprovided subnet."
        - id: subnetName
          type: string
          description: "The name of the subnet that the route table\rwill be removed from."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function removeRouteTableFromSubnet(vnetName, subnetName, callback);'
    fullName: >-
      RouteOperations~RouteOperations.removeRouteTableFromSubnet(vnetName,
      subnetName, callback)
    children:
      - 'RouteOperations~RouteOperations#removeRouteTableFromSubnet~client2'
  - uid: 'RouteOperations~RouteOperations#setRoute'
    id: setRoute
    parent: RouteOperations~RouteOperations
    name: 'setRoute(routeTableName, routeName, parameters, callback)'
    summary: Set the specified route for the provided table in this subscription.
    type: Method
    syntax:
      parameters:
        - id: routeTableName
          type: string
          description: "The name of the route table where the\rprovided route will be set."
        - id: routeName
          type: string
          description: "The name of the route that will be set on the\rprovided route table."
        - id: parameters
          type: SetRouteParameters
          description: "The parameters necessary to create\ra new route table."
        - id: parameters.name
          type: string
        - id: parameters.addressPrefix
          type: string
        - id: parameters.nextHop
          type: NextHop
        - id: parameters.nextHop.type
          type: string
          description: "Gets or sets the type of the\rnext hop."
        - id: parameters.nextHop.ipAddress
          type: string
          description: "Gets or sets the next hop\rIP addresses."
        - id: callback
          type: function
      return:
        type: Stream
        description: The response stream.
      content: 'function setRoute(routeTableName, routeName, parameters, callback);'
    fullName: >-
      RouteOperations~RouteOperations.setRoute(routeTableName, routeName,
      parameters, callback)
    children:
      - 'RouteOperations~RouteOperations#setRoute~client2'
references:
  - uid: string
    name: string
    fullName: string
    isExternal: false
  - uid: AddRouteTableToSubnetParameters
    name: AddRouteTableToSubnetParameters
    fullName: AddRouteTableToSubnetParameters
    isExternal: true
  - uid: function
    name: function
    fullName: function
    isExternal: false
  - uid: Stream
    name: Stream
    fullName: Stream
    isExternal: true
  - uid: CreateRouteTableParameters
    name: CreateRouteTableParameters
    fullName: CreateRouteTableParameters
    isExternal: true
  - uid: SetRouteParameters
    name: SetRouteParameters
    fullName: SetRouteParameters
    isExternal: true
  - uid: NextHop
    name: NextHop
    fullName: NextHop
    isExternal: true
